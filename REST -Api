REST is an acronym for REpresentational State Transfer and an architectural style
for distributed hypermedia systems. Roy Fielding first presented it in 2000 in his famous dissertation.

Like other architectural styles, REST has its guiding principles and constraints.
These principles must be satisfied if a service interface needs to be referred to as RESTful.


1.Client-Server
The client-server design pattern enforces the separation of concerns,
which helps the client and the server components evolve independently.
By separating the user interface concerns (client) from the data storage
concerns (server), we improve the portability of the user interface across 
multiple platforms and improve scalability by simplifying the server components.
While the client and the server evolve, we have to make sure that the interface/
contract between the client and the server does not break.

2.Statelessness
As per the REST (REpresentational “State” Transfer) architecture, the server
does not store any state about the client session on the server-side. This restriction is called Statelessness.
Each request from the client to the server must contain all of the necessary information to understand the request.
The server cannot take advantage of any stored context on the server.
The application’s session state is therefore kept entirely on the client.
The client is responsible for storing and handling the session related information on its own side.
This also means that the client is responsible for sending any state information to the server whenever it is needed. 
There should not be any session affinity or sticky session between the client and the server.

3.Cacheable
If the response is cacheable, the client application gets the right to reuse the response data later for
equivalent requests and a specified period.
Caching is the ability to store copies of frequently accessed data in several places along the request-response path.
When a consumer requests a resource representation, the request goes through a cache or a series of caches
(local cache, proxy cache, or reverse proxy) toward the service hosting the resource.
If any of the caches along the request path has a fresh copy of the requested representation, 
it uses that copy to satisfy the request. If none of the caches can satisfy the request,
the request travels to the service (or origin server as it is formally known).
By using HTTP headers, an origin server indicates whether a response can be cached and, if so, by whom, and for how long.
Caches along the response path can take a copy of a response, but only if the caching metadata allows them to do so.
Optimizing the network using caching improves the overall quality-of-service in the following ways:
Reduce bandwidth
Reduce latency
Reduce load on servers
Hide network failures

4.Layered System
The layered system style allows an architecture to be composed of hierarchical layers by constraining component behavior.
For example, in a layered system, each component cannot see beyond the immediate layer they are interacting with.










